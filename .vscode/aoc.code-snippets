{
  // Place your nho.do workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  "Advent of Code - C#": {
    "scope": "csharp",
    "prefix": "aoccs",
    "body": [
        "namespace aoc24.Problems;",
        "",
        "public sealed class Day${1:day} : IProblem<${2:type}>",
        "{",
        "    public ${2} Solve(string input) => ${3:name}(input);",
        "",
        "    public static ${2} ${3}Optimized(ReadOnlySpan<char> input)",
        "    {",
        "        return default;",
        "    }",
        "",
        "    public static ${2} ${3}(string input)",
        "    {",
        "        return default;",
        "    }",
        "}",
        "",
        "public class Day${1}Test",
        "{",
        "    private readonly Day${1} sut = new();",
        "",
        "    [Theory, InlineData(1)]",
        "    public void TestSet_ShouldYield_Result(int expected)",
        "    {",
        "        var input = InputReader.ReadProblemInput(\"day${1}_1\");",
        "        var result = sut.Solve(input);",
        "",
        "        Assert.Equal(expected, result);",
        "    }",
        "",
        "    [Theory, InlineData(100)]",
        "    public void FullSet_ShouldYield_Result(int expected)",
        "    {",
        "        var input = InputReader.ReadProblemInput(\"day${1}_2\");",
        "        var result = sut.Solve(input);",
        "",
        "        Assert.Equal(expected, result);",
        "    }",
        "}",
        "",
        "[MemoryDiagnoser, ShortRunJob]",
        "public class Day${1}Benchmark",
        "{",
        "    private readonly Day${1} problem = new();",
        "",
        "    private readonly string input = InputReader.ReadProblemInput(\"day${1}_1\");",
        "",
        "    [Benchmark(Description = \"Day${1} problem\")]",
        "    public void Measure() => problem.Solve(input);",
        "}",
    ],
    "description": "Advent of Code - C#"
  },
}
